import numpy as np

class TreeNode:
    def __init__(self, feature=None, threshold=None, left=None, right=None, value=None):
        self.feature = feature        # Index of feature to split on
        self.threshold = threshold    # Threshold value for the feature
        self.left = left              # Left subtree (<= threshold)
        self.right = right            # Right subtree (> threshold)
        self.value = value            # Value if the node is a leaf node (class label)

class DecisionTreeClassifier:
    def __init__(self, max_depth=None):
        self.max_depth = max_depth
        self.tree = None

    def entropy(self, y):
        """Calculate entropy of a list of class labels."""
        classes, counts = np.unique(y, return_counts=True)
        probabilities = counts / len(y)
        entropy = -np.sum(probabilities * np.log2(probabilities))
        return entropy

    def information_gain(self, left_y, right_y, parent_entropy):
        """Calculate information gain from splitting."""
        left_weight = len(left_y) / (len(left_y) + len(right_y))
        right_weight = len(right_y) / (len(left_y) + len(right_y))
        gain = parent_entropy - (left_weight * self.entropy(left_y) + right_weight * self.entropy(right_y))
        return gain

    def split(self, X, y, feature, threshold):
        """Split dataset based on feature and threshold."""
        left_mask = X[:, feature] <= threshold
        right_mask = X[:, feature] > threshold
        return X[left_mask], X[right_mask], y[left_mask], y[right_mask]

    def find_best_split(self, X, y):
        """Find the best split for the dataset."""
        best_feature = None
        best_threshold = None
        max_gain = -np.inf
        parent_entropy = self.entropy(y)

        for feature in range(X.shape[1]):
            thresholds = np.unique(X[:, feature])
            for threshold in thresholds:
                left_X, right_X, left_y, right_y = self.split(X, y, feature, threshold)
                gain = self.information_gain(left_y, right_y, parent_entropy)
                if gain > max_gain:
                    max_gain = gain
                    best_feature = feature
                    best_threshold = threshold

        return best_feature, best_threshold

    def build_tree(self, X, y, depth):
        """Recursively build the decision tree."""
        if depth == 0 or len(np.unique(y)) == 1:
            unique_classes, counts = np.unique(y, return_counts=True)
            return TreeNode(value=unique_classes[np.argmax(counts)])

        best_feature, best_threshold = self.find_best_split(X, y)
        left_X, right_X, left_y, right_y = self.split(X, y, best_feature, best_threshold)

        left_subtree = self.build_tree(left_X, left_y, depth - 1)
        right_subtree = self.build_tree(right_X, right_y, depth - 1)

        return TreeNode(best_feature, best_threshold, left_subtree, right_subtree)

    def fit(self, X, y):
        """Fit the decision tree to the training data."""
        self.tree = self.build_tree(X, y, self.max_depth)

    def predict_instance(self, x, node):
        """Predict a single instance using the trained tree."""
        if node.value is not None:
            return node.value

        if x[node.feature] <= node.threshold:
            return self.predict_instance(x, node.left)
        else:
            return self.predict_instance(x, node.right)

    def predict(self, X):
        """Predict class labels for multiple instances."""
        predictions = []
        for x in X:
            predictions.append(self.predict_instance(x, self.tree))
        return np.array(predictions)

if __name__ == '__main__':
    # Example dataset
    X = np.array([[2.5, 3.5],
                  [1.5, 4.5],
                  [3.5, 2.5],
                  [4.5, 1.5],
                  [3.5, 3.5],
                  [2.0, 2.0],
                  [1.0, 3.0],
                  [4.0, 4.0],
                  [3.0, 1.0]])
    y = np.array([1, 1, 1, 1, 0, 0, 0, 0, 0])

    # Initialize and train decision tree
    dt = DecisionTreeClassifier(max_depth=3)
    dt.fit(X, y)

    # Predict
    print("Predictions:", dt.predict(X))
